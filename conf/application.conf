# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret = "%APPLICATION_SECRET%"

# The application languages
# ~~~~~
play.i18n.langs = ["en", "ru"]

# The application DI modules
# ~~~~~
play.modules.enabled += "modules.SilhouetteModule"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
slick.dbs.default.driver = "slick.driver.PostgresDriver$"
slick.dbs.default.db.driver = org.postgresql.Driver
slick.dbs.default.db.url = "jdbc:postgresql://localhost:5432/testdb"
slick.dbs.default.db.user = postgres
slick.dbs.default.db.password = "12345"

#play.evolutions.enabled = true

# Evolutions
# ~~~~~
# You can disable evolutions if needed
evolutionplugin = enabled

# Registers the error handler
# ~~~~~
play.http.errorHandler = "utils.ErrorHandler"

# Registers the request handler
# ~~~~~
play.http.requestHandler = "play.api.http.DefaultHttpRequestHandler"

# Registers the filters
# ~~~~~
play.http.filters = "utils.Filters"

# Security Filter Configuration - Content Security Policy
# ~~~~~
play.filters.headers {
  contentSecurityPolicy = "default-src 'self';"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" img-src 'self' *.fbcdn.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" style-src 'self' 'unsafe-inline' maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" font-src 'self' fonts.gstatic.com fonts.googleapis.com maxcdn.bootstrapcdn.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" connect-src 'self' twitter.com *.xing.com;"
}

# CSRF Token Filter Configuration
# ~~~~~
play.filters.csrf.cookie.name = "PLAY_CSRF_TOKEN" // We store the CSRF token in a cookie instead of the session so that Angular can read it
play.filters.csrf.contentType.blackList = [ // We would also check AJAX requests from type application/json
  "application/x-www-form-urlencoded",
  "multipart/form-data",
  "text/plain"
]

include "silhouette.conf"